----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------ DROP TABLES ---------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

DROP TABLE T_VOCABULARY_IN_STATISTIC;
DROP TABLE T_TRANSLATION;
DROP TABLE T_VOCABULARY_IN_USER;
DROP TABLE T_VOCABULARY;
DROP TABLE T_UNIT;
DROP TABLE T_STATISTIC;
DROP TABLE T_USER;
DROP TABLE T_LANGUAGE;
DROP TABLE T_RESSOURCES;
DROP VIEW V_ALL_VOCABULARY_ENTRIES;
DROP VIEW V_VOCABULARY_TO_LEARN;
DROP VIEW V_SHOW_ERRORS;

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------ CREATE TABLES -------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

CREATE TABLE T_UNIT(
ID NUMBER GENERATED ALWAYS AS IDENTITY(START WITH 1 INCREMENT BY 1),
NAME VARCHAR(16) NOT NULL,
CONSTRAINT UNIT_PK PRIMARY KEY(ID)
);

CREATE TABLE T_LANGUAGE(
ID NUMBER GENERATED ALWAYS AS IDENTITY(START WITH 1 INCREMENT BY 1),
NAME VARCHAR(5) NOT NULL,
CONSTRAINT LANGUAGE_PK PRIMARY KEY(ID)
);

CREATE TABLE T_VOCABULARY(
ID NUMBER GENERATED ALWAYS AS IDENTITY(START WITH 1 INCREMENT BY 1),
VOCABULARY VARCHAR2(40) NOT NULL,
UNIT_ID NUMBER NOT NULL,
LANGUAGE_ID NUMBER NOT NULL,
CONSTRAINT VOCABULARY_PK PRIMARY KEY(ID),
CONSTRAINT UNIT_FK FOREIGN KEY(UNIT_ID) REFERENCES T_UNIT(ID),
CONSTRAINT LANGUAGE_VOC_FK FOREIGN KEY(LANGUAGE_ID) REFERENCES T_LANGUAGE(ID)
);

CREATE TABLE T_USER(
ID NUMBER GENERATED ALWAYS AS IDENTITY(START WITH 1 INCREMENT BY 1),
EMAIL VARCHAR2(40) NOT NULL,
FIRSTNAME VARCHAR(16) NOT NULL,
LASTNAME VARCHAR(16) NOT NULL,
CONSTRAINT USER_PK PRIMARY KEY(ID)
);

CREATE TABLE T_STATISTIC(
ID NUMBER GENERATED ALWAYS AS IDENTITY(START WITH 1 INCREMENT BY 1),
TIMESTAMP_GERNERATED TIMESTAMP(6) DEFAULT CURRENT_TIMESTAMP,
TIMESTAMP_PRACTICE_DONE TIMESTAMP(6),
USER_ID NUMBER NOT NULL,
CONSTRAINT STATISTIC_PK PRIMARY KEY(ID),
CONSTRAINT USER_FK FOREIGN KEY(USER_ID) REFERENCES T_USER(ID)
);

CREATE TABLE T_VOCABULARY_IN_STATISTIC(
ID NUMBER GENERATED ALWAYS AS IDENTITY(START WITH 1 INCREMENT BY 1),
CORRECT NUMBER,
STATISTIC_ID NUMBER NOT NULL,
VOCABULARY_ID NUMBER NOT NULL,
CONSTRAINT VOCABULARY_IN_STATISTIC_PK PRIMARY KEY(VOCABULARY_ID, STATISTIC_ID), 
CONSTRAINT STATISTIC_VOC_FK FOREIGN KEY(STATISTIC_ID) REFERENCES T_STATISTIC (ID),
CONSTRAINT VOCABULARY_STAT_FK FOREIGN KEY (VOCABULARY_ID) REFERENCES T_VOCABULARY(ID)
);

CREATE TABLE T_TRANSLATION(
ID NUMBER GENERATED ALWAYS AS IDENTITY(START WITH 1 INCREMENT BY 1),
TRANSLATION VARCHAR2(40) NOT NULL,
VOCABULARY VARCHAR2(40) NOT NULL,
VOCABULARY_ID NUMBER NOT NULL,
LANGUAGE_ID NUMBER NOT NULL,
CONSTRAINT TRANSLATION_PK PRIMARY KEY(ID),
CONSTRAINT VOCABULARY_FK FOREIGN KEY(VOCABULARY_ID) REFERENCES T_VOCABULARY(ID),
CONSTRAINT LANGUAGE_FK FOREIGN KEY(LANGUAGE_ID) REFERENCES T_LANGUAGE(ID)
);

CREATE TABLE T_VOCABULARY_IN_USER(
ID NUMBER GENERATED ALWAYS AS IDENTITY(START WITH 1 INCREMENT BY 1),
CATEGORY NUMBER NOT NULL,
COUNTER NUMBER NOT NULL,
USER_ID NUMBER NOT NULL,
VOCABULARY_ID NUMBER NOT NULL,
TIMESTAMP_LAST_PRACTICE TIMESTAMP(6) DEFAULT CURRENT_TIMESTAMP,
CONSTRAINT VOCABULARY_IN_USER_PK PRIMARY KEY (VOCABULARY_ID, USER_ID),
CONSTRAINT USER_VOC_FK FOREIGN KEY (USER_ID) REFERENCES T_USER(ID),
CONSTRAINT VOCABULARY_USER_FK FOREIGN KEY (VOCABULARY_ID) REFERENCES T_VOCABULARY(ID) 
);

CREATE TABLE T_RESSOURCES(
ID NUMBER GENERATED ALWAYS AS IDENTITY(START WITH 1 INCREMENT BY 1),
RESSOURCE VARCHAR2(256),
CONSTRAINT RESSOURCES_PK PRIMARY KEY (ID)
);

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------ CREATE VIEWS ---------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

CREATE VIEW V_ALL_VOCABULARY_ENTRIES AS
SELECT A.*, COALESCE(VU.CATEGORY, 0) AS CATEGORY FROM
(SELECT US.ID AS USER_ID, U.ID AS UNIT_ID, U.NAME AS UNIT_NAME, V.ID AS VOC_ID, V.VOCABULARY, V.LANGUAGE_ID AS VOC_LANG_ID, VL.NAME AS VOC_LANG, T.ID AS TRA_ID, T.TRANSLATION, T.LANGUAGE_ID AS TRA_LANG_ID, LL.NAME AS TRA_LANG
FROM T_USER US, T_VOCABULARY V
INNER JOIN T_TRANSLATION T ON V.ID = T.VOCABULARY_ID 
INNER JOIN T_UNIT U ON V.UNIT_ID = U.ID
INNER JOIN T_LANGUAGE VL ON VL.ID = V.LANGUAGE_ID 
INNER JOIN T_LANGUAGE LL ON LL.ID = T.LANGUAGE_ID) A
LEFT JOIN T_VOCABULARY_IN_USER VU ON VU.USER_ID = A.USER_ID;

CREATE VIEW V_VOCABULARY_TO_LEARN AS
SELECT VOCABULARY_ID, S.USER_ID AS USER_ID, U.EMAIL AS EMAIL
FROM T_VOCABULARY_IN_STATISTIC VS
INNER JOIN T_STATISTIC S ON VS.STATISTIC_ID = S.ID
INNER JOIN T_USER U ON U.ID = S.USER_ID
WHERE CORRECT IS NULL; 

CREATE VIEW V_SHOW_ERRORS AS
SELECT * FROM SYS.USER_ERRORS WHERE (TYPE = 'PROCEDURE' OR TYPE = 'FUNCTION') AND NAME LIKE 'ANSWER';

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------ INSERT RESSOURCES ---------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

BEGIN

INSERT INTO T_RESSOURCES (RESSOURCE) VALUES ('Hallo ');
INSERT INTO T_RESSOURCES (RESSOURCE) VALUES ('Du hast schon lange keine Vokabeln mehr gelernt. Deshalb solltest Du das jetzt unbedingt tun.');
INSERT INTO T_RESSOURCES (RESSOURCE) VALUES ('Unten siehst Du die Vokabeln, die Du lernen solltest. :)');
INSERT INTO T_RESSOURCES (RESSOURCE) VALUES ('Die Vokabel ');
INSERT INTO T_RESSOURCES (RESSOURCE) VALUES (' war richtig. Gut gemacht! :)');
INSERT INTO T_RESSOURCES (RESSOURCE) VALUES (' war leider nicht richtig. Die richtige Uebersetzung lautet: ');
INSERT INTO T_RESSOURCES (RESSOURCE) VALUES ('Deine Antwort war: ' );

END;
/
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------ PROCEDURES ----------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------- INSERT ---------------------------------------------------------------------------------------------------------------------

CREATE OR REPLACE PROCEDURE INSERT_NEW_LANGUAGE (P_LANGUAGE IN VARCHAR)
	IS
	BEGIN
		MERGE INTO T_LANGUAGE DEST USING (SELECT P_LANGUAGE AS NAME FROM DUAL) SRC ON (SRC.NAME = DEST.NAME)
		WHEN NOT MATCHED THEN
			INSERT  (NAME) VALUES (P_LANGUAGE);
		COMMIT;
	END;
/

CREATE OR REPLACE PROCEDURE INSERT_NEW_UNIT (P_UNIT IN VARCHAR2)
    IS
    BEGIN
        MERGE INTO T_UNIT DEST USING (SELECT P_UNIT AS NAME FROM DUAL) SRC ON (SRC.NAME = DEST.NAME)
        WHEN NOT MATCHED THEN
            INSERT (NAME) VALUES (P_UNIT);
        COMMIT;
    END;
/

CREATE OR REPLACE PROCEDURE INSERT_NEW_USER (P_FIRSTNAME IN VARCHAR2, P_LASTNAME IN VARCHAR2, P_EMAIL IN VARCHAR2)
    IS
    BEGIN
        MERGE INTO T_USER DEST USING (SELECT P_FIRSTNAME AS FIRSTNAME, P_LASTNAME AS LASTNAME, P_EMAIL AS EMAIL FROM DUAL) SRC ON (SRC.EMAIL = DEST.EMAIL)
        WHEN NOT MATCHED THEN
            INSERT (FIRSTNAME, LASTNAME, EMAIL) VALUES (P_FIRSTNAME, P_LASTNAME, P_EMAIL);
        COMMIT;
    END;
/

CREATE OR REPLACE PROCEDURE INSERT_NEW_TRANSLATION (P_TRANSLATION IN VARCHAR2, P_VOCABULARY IN VARCHAR2, P_UNIT IN VARCHAR2, P_LANGUAGE IN VARCHAR)
    IS
    BEGIN
        MERGE INTO T_TRANSLATION DEST USING (SELECT P_TRANSLATION AS TRANSLATION,(SELECT V.ID FROM T_VOCABULARY V INNER JOIN T_UNIT U ON U.ID = U.ID WHERE V.VOCABULARY = P_VOCABULARY AND U.NAME = P_UNIT) AS VOCABULARY_ID, P_VOCABULARY AS VOCABULARY,P_LANGUAGE AS LANGUAGE FROM DUAL) 
        SRC ON (SRC.VOCABULARY_ID = DEST.VOCABULARY_ID AND SRC.TRANSLATION = DEST.TRANSLATION)
        WHEN NOT MATCHED THEN
            INSERT (TRANSLATION, VOCABULARY, LANGUAGE_ID, VOCABULARY_ID) VALUES (P_TRANSLATION, P_VOCABULARY, (SELECT ID FROM T_LANGUAGE WHERE NAME = P_LANGUAGE), (SELECT ID FROM T_VOCABULARY WHERE VOCABULARY = P_VOCABULARY));
        COMMIT;
    END;
/

CREATE OR REPLACE PROCEDURE INSERT_NEW_VOCABULARY (P_VOCABULARY IN VARCHAR2, P_UNIT IN VARCHAR2, P_LANGUAGE IN VARCHAR2)
    IS
    BEGIN
        MERGE INTO T_VOCABULARY DEST USING (SELECT P_VOCABULARY AS VOCABULARY, P_UNIT AS UNIT, P_LANGUAGE AS LANGUAGE FROM DUAL) SRC ON (SRC.VOCABULARY = DEST.VOCABULARY)
        WHEN NOT MATCHED THEN
            INSERT (VOCABULARY, UNIT_ID, LANGUAGE_ID) VALUES (P_VOCABULARY, (SELECT ID FROM T_UNIT WHERE NAME = P_UNIT), (SELECT ID FROM T_LANGUAGE WHERE NAME = P_LANGUAGE));
        COMMIT;
    END;
/        

CREATE OR REPLACE PROCEDURE CREATE_NEW_STATISTIC (P_CATEGORY IN NUMBER, P_UNIT IN VARCHAR2, P_USER_ID IN NUMBER)
    IS V_STATISTIC_ID NUMBER;
    BEGIN	
--create the statistic itself
        INSERT INTO T_STATISTIC (USER_ID) VALUES (P_USER_ID);
        COMMIT;

--load variables
        SELECT ID INTO V_STATISTIC_ID FROM T_STATISTIC WHERE ROWID=(SELECT MAX(ROWID) FROM T_STATISTIC);


        FOR	I IN (SELECT DISTINCT MIN(VOC_ID) AS ID FROM V_ALL_VOCABULARY_ENTRIES WHERE (CATEGORY = P_CATEGORY OR P_CATEGORY = -1) AND (UNIT_NAME = P_UNIT OR P_UNIT = ' ') GROUP BY TRANSLATION)
        LOOP
            INSERT INTO T_VOCABULARY_IN_STATISTIC (STATISTIC_ID, VOCABULARY_ID) VALUES (V_STATISTIC_ID, I.ID);	
            COMMIT;
        END LOOP;

    END; 
/


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------ FUNCTIONS -----------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

CREATE OR REPLACE FUNCTION GET_VOCABULARY_BY_ID(P_VOCABULARY_ID IN NUMBER)
    RETURN VARCHAR2
    IS V_VOCABULARY VARCHAR2(256);
    BEGIN
        SELECT VOCABULARY INTO V_VOCABULARY FROM T_VOCABULARY WHERE ID = P_VOCABULARY_ID;
        RETURN V_VOCABULARY;
    END;
/

CREATE OR REPLACE FUNCTION GET_RESSOURCE(P_RESSOURCE_ID IN NUMBER)
    RETURN VARCHAR2
    IS V_RESSOURCE VARCHAR2(256);
    BEGIN
        SELECT RESSOURCE INTO V_RESSOURCE FROM T_RESSOURCES WHERE ID = P_RESSOURCE_ID;
        RETURN V_RESSOURCE;
    END;
/

CREATE OR REPLACE FUNCTION GET_TRANSLATION_BY_VOCABULARY_ID (P_VOCABULARY_ID IN NUMBER)
    RETURN VARCHAR2
    IS V_TRANSLATION VARCHAR2(256);
    BEGIN
        SELECT TRANSLATION INTO V_TRANSLATION FROM T_TRANSLATION WHERE VOCABULARY_ID = P_VOCABULARY_ID;
        RETURN V_TRANSLATION;
    END;
/

CREATE OR REPLACE FUNCTION CORRECT_IS_NULL
    RETURN BOOLEAN
    IS V_NUMBER_OF_ROWS_WITH_CORRECT NUMBER;
    BEGIN
        SELECT COUNT(*) INTO V_NUMBER_OF_ROWS_WITH_CORRECT FROM T_VOCABULARY_IN_STATISTIC WHERE CORRECT IS NULL;
        RETURN V_NUMBER_OF_ROWS_WITH_CORRECT > 0; 
    END;
/

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------ ANSWER --------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

CREATE OR REPLACE FUNCTION CHECK_ANSWER(P_VOCABULARY_ID IN NUMBER, P_ANSWER IN VARCHAR2)
    RETURN BOOLEAN
    IS V_NUMBER_OF_ROWS_WITH_ANSWER NUMBER;
    BEGIN
        SELECT COUNT(*) INTO V_NUMBER_OF_ROWS_WITH_ANSWER FROM T_TRANSLATION WHERE TRANSLATION = P_ANSWER AND VOCABULARY_ID = P_VOCABULARY_ID;
        RETURN V_NUMBER_OF_ROWS_WITH_ANSWER > 0;
END;
/

CREATE OR REPLACE PROCEDURE ANSWER (P_VOCABULARY_ID IN NUMBER, P_ANSWER IN VARCHAR2, P_USER_ID IN NUMBER)
    IS
    V_CORRECT NUMBER;
    V_VOCABULARY_ID NUMBER;
    V_MESSAGE VARCHAR2(256);
    CRLF        VARCHAR2(2)  := CHR(13)||CHR(10);
    BEGIN
            IF CHECK_ANSWER(P_VOCABULARY_ID, P_ANSWER) THEN
            V_CORRECT := -1;
            V_MESSAGE := GET_RESSOURCE(4) || '''' || GET_VOCABULARY_BY_ID(P_VOCABULARY_ID) || '''' || GET_RESSOURCE(5) || CRLF ||
                         GET_RESSOURCE(7) || P_ANSWER || CRLF;
            DBMS_OUTPUT.PUT_LINE(V_MESSAGE);

            ELSE 
            V_CORRECT := 0;
            V_MESSAGE := GET_RESSOURCE(4) || '''' || GET_VOCABULARY_BY_ID(P_VOCABULARY_ID) || '''' ||GET_RESSOURCE(6) || '''' || GET_TRANSLATION_BY_VOCABULARY_ID(P_VOCABULARY_ID) || '''' || CRLF ||
                         GET_RESSOURCE(7) || P_ANSWER || CRLF;
            DBMS_OUTPUT.PUT_LINE(V_MESSAGE);
            END IF;
        UPDATE T_VOCABULARY_IN_STATISTIC SET CORRECT = V_CORRECT WHERE VOCABULARY_ID = P_VOCABULARY_ID;
        INSERT_COUNTER_AND_CATEGORY(P_USER_ID, P_VOCABULARY_ID, V_CORRECT);
    COMMIT;
    SET_TIMESTAMP_DONE();
    END;
/

CREATE OR REPLACE PROCEDURE INSERT_COUNTER_AND_CATEGORY(P_USER_ID IN NUMBER, P_VOCABULARY_ID IN NUMBER, P_CORRECT IN NUMBER)
    IS
    BEGIN
        MERGE INTO T_VOCABULARY_IN_USER DEST USING (SELECT P_USER_ID AS USER_ID, P_VOCABULARY_ID AS VOCABULARY_ID FROM DUAL) SRC ON (SRC.USER_ID=DEST.USER_ID AND SRC.VOCABULARY_ID=DEST.VOCABULARY_ID)
        WHEN MATCHED THEN
            UPDATE SET 
            TIMESTAMP_LAST_PRACTICE = CURRENT_TIMESTAMP,
            CATEGORY = CASE 
                        WHEN(P_CORRECT=-1 AND CATEGORY < 5 AND COUNTER = 5)
                        THEN (CATEGORY + 1)
                        ELSE CATEGORY
                        END,
            COUNTER = CASE
                        WHEN ((P_CORRECT = 0 AND COUNTER = 0 ) OR (P_CORRECT = -1 AND COUNTER = 5))
                        THEN 0
                        ELSE(COUNTER+1)
                        END
            WHERE USER_ID = P_USER_ID AND VOCABULARY_ID = P_VOCABULARY_ID
        WHEN NOT MATCHED THEN
        INSERT (USER_ID, VOCABULARY_ID, CATEGORY, COUNTER)
        VALUES (P_USER_ID, P_VOCABULARY_ID, 0, CASE
                                                WHEN (P_CORRECT = -1) THEN 1
                                                ELSE 0
                                                END);
        COMMIT;
    END;
/

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------ SEND EMAIL ----------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

CREATE OR REPLACE PROCEDURE SEND_MAIL (P_RECIPIENT IN VARCHAR2, P_MESSAGE IN VARCHAR2)
    IS 
    V_FROM      VARCHAR2(80) := 'trainer.vocabeln@lernedies.com';
    V_RECIPIENT VARCHAR2(80) := P_RECIPIENT;
    V_SUBJECT   VARCHAR2(80) := 'Vokabeln lernen';
    V_MAIL_HOST VARCHAR2(30) := 'mail.triology.de';
    V_MAIL_CONN UTL_SMTP.CONNECTION;

    CRLF        VARCHAR2(2)  := CHR(13)||CHR(10);
    BEGIN
        V_MAIL_CONN := UTL_SMTP.OPEN_CONNECTION(V_MAIL_HOST, 25);
        UTL_SMTP.HELO(V_MAIL_CONN, V_MAIL_HOST);
        UTL_SMTP.MAIL(V_MAIL_CONN, V_FROM);
        UTL_SMTP.RCPT(V_MAIL_CONN, V_RECIPIENT);
        UTL_SMTP.DATA(V_MAIL_CONN,
        'Date: '   || TO_CHAR(sysdate, 'Dy, DD Mon YYYY hh24:mi:ss') || CRLF ||
        'From: '   || V_FROM || CRLF ||
        'Subject: '|| V_SUBJECT || CRLF ||
        'To: '     || V_RECIPIENT || CRLF ||
        CRLF ||
        P_MESSAGE
        );
        utl_smtp.QUIT(V_MAIL_CONN);
        EXCEPTION
        WHEN UTL_SMTP.TRANSIENT_ERROR OR UTL_SMTP.PERMANENT_ERROR then
        RAISE_APPLICATION_ERROR(-20000, 'Unable to send mail', TRUE);
    END;
/

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------ CATEGORIES ----------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


CREATE OR REPLACE PROCEDURE CATEGORY(P_CATEGORY IN NUMBER) 
    IS
    V_MESSAGE VARCHAR2(8192) := ' ';
    CRLF        VARCHAR2(2)  := CHR(13)||CHR(10);
    V_USER_ID NUMBER;
    V_FIRSTNAME VARCHAR2(16);
    V_RECIPIENT VARCHAR2(256);
    BEGIN
    FOR I IN (SELECT DISTINCT USER_ID AS V_USER_ID FROM V_ALL_VOCABULARY_ENTRIES)
    LOOP
    SELECT FIRSTNAME INTO V_FIRSTNAME FROM T_USER WHERE ID = I.V_USER_ID;
    SELECT EMAIL INTO V_RECIPIENT FROM T_USER WHERE ID = I.V_USER_ID;
        V_MESSAGE := GET_RESSOURCE(1) || V_FIRSTNAME || ',' || CRLF ||
        GET_RESSOURCE(2)|| CRLF ||
        GET_RESSOURCE(3) || CRLF || CRLF ||
        'BEGIN' || CRLF;
            FOR J IN (SELECT DISTINCT VOC_ID AS V_VOCABULARY_ID FROM V_ALL_VOCABULARY_ENTRIES WHERE CATEGORY = P_CATEGORY AND USER_ID = I.V_USER_ID)
            LOOP
            V_MESSAGE := V_MESSAGE || '/*' || GET_VOCABULARY_BY_ID(J.V_VOCABULARY_ID) || ': ' || '*/' || 'ANSWER(' || J.V_VOCABULARY_ID || ', ' || '''''' || ', ' || I.V_USER_ID || ');' || CRLF;
            END LOOP;
            CREATE_NEW_STATISTIC(P_CATEGORY, ' ', I.V_USER_ID);
        V_MESSAGE := V_MESSAGE || 'END;';
        SEND_MAIL(V_RECIPIENT, V_MESSAGE);
        END LOOP;
    END;
/

CREATE OR REPLACE PROCEDURE SET_TIMESTAMP_DONE
    IS
    BEGIN
        FOR I IN (SELECT ID AS V_STATISTIC_ID FROM T_STATISTIC)
        LOOP
   		UPDATE T_STATISTIC SET TIMESTAMP_PRACTICE_DONE = CURRENT_TIMESTAMP WHERE ID = I.V_STATISTIC_ID 
           AND NOT EXISTS (SELECT COUNT(*) FROM T_VOCABULARY_IN_STATISTIC WHERE STATISTIC_ID = I.V_STATISTIC_ID GROUP BY CORRECT HAVING CORRECT IS NULL);
        COMMIT;
        END LOOP;
    END;
/

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------ JOBS ----------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

BEGIN
    DBMS_SCHEDULER.DROP_JOB(job_name => 'CAT0');
    DBMS_SCHEDULER.DROP_JOB(job_name => 'CAT1');
    DBMS_SCHEDULER.DROP_JOB(job_name => 'CAT2');
    DBMS_SCHEDULER.DROP_JOB(job_name => 'CAT3');
    DBMS_SCHEDULER.DROP_JOB(job_name => 'CAT4');
    DBMS_SCHEDULER.DROP_JOB(job_name => 'CAT5');
END;
/

BEGIN
DBMS_SCHEDULER.CREATE_JOB (
    job_name        =>  'CAT0',
    job_type        =>  'PLSQL_BLOCK',
    job_action      =>  'CATEGORY(0);',
    start_date      =>  SYSTIMESTAMP,
    enabled         =>  TRUE,
    repeat_interval =>  'FREQ=DAILY; BYHOUR=8;',
    auto_drop       =>  TRUE,
    comments        =>  '');
END;
/

BEGIN
DBMS_SCHEDULER.CREATE_JOB (
    job_name        =>  'CAT1',
    job_type        =>  'PLSQL_BLOCK',
    job_action      =>  'CATEGORY(1);',
    start_date      =>  SYSTIMESTAMP,
    enabled         =>  TRUE,
    repeat_interval =>  'FREQ=DAILY; INTERVAL=2',
    auto_drop       =>  TRUE,
    comments        =>  '');
END;
/

BEGIN
DBMS_SCHEDULER.CREATE_JOB (
    job_name        =>  'CAT2',
    job_type        =>  'PLSQL_BLOCK',
    job_action      =>  'CATEGORY(2);',
    start_date      =>  SYSTIMESTAMP,
    enabled         =>  TRUE,
    repeat_interval =>  'FREQ=DAILY; INTERVAL=3;',
    auto_drop       =>  TRUE,
    comments        =>  '');
END;
/

BEGIN
DBMS_SCHEDULER.CREATE_JOB (
    job_name        =>  'CAT3',
    job_type        =>  'PLSQL_BLOCK',
    job_action      =>  'CATEGORY(3);',
    start_date      =>  SYSTIMESTAMP,
    enabled         =>  TRUE,
    repeat_interval =>  'FREQ=DAILY; INTERVAL=4;',
    auto_drop       =>  TRUE,
    comments        =>  '');
END;
/

BEGIN
DBMS_SCHEDULER.CREATE_JOB (
    job_name        =>  'CAT4',
    job_type        =>  'PLSQL_BLOCK',
    job_action      =>  'CATEGORY(4);',
    start_date      =>  SYSTIMESTAMP,
    enabled         =>  TRUE,
    repeat_interval =>  'FREQ=DAILY; INTERVAL=5;',
    auto_drop       =>  TRUE,
    comments        =>  '');
END;
/

BEGIN
DBMS_SCHEDULER.CREATE_JOB (
    job_name        =>  'CAT5',
    job_type        =>  'PLSQL_BLOCK',
    job_action      =>  'CATEGORY(5);',
    start_date      =>  SYSTIMESTAMP,
    enabled         =>  TRUE,
    repeat_interval =>  'FREQ=DAILY; INTERVAL=6;',
    auto_drop       =>  TRUE,
    comments        =>  '');
END;
/

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------ TESTS ---------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

BEGIN


INSERT_NEW_LANGUAGE('EN');
INSERT_NEW_LANGUAGE('DE');

INSERT_NEW_UNIT('LEKTION 1');

INSERT_NEW_USER('Lisa', 'Milde', 'lisa.milde@triology.de');

INSERT_NEW_VOCABULARY('to put', 'LEKTION 1', 'EN');
INSERT_NEW_VOCABULARY('to walk', 'LEKTION 1', 'EN');
INSERT_NEW_VOCABULARY('mother', 'LEKTION 1', 'EN');
INSERT_NEW_VOCABULARY('father', 'LEKTION 1', 'EN');
INSERT_NEW_VOCABULARY('pretty', 'LEKTION 1', 'EN');
INSERT_NEW_VOCABULARY('old', 'LEKTION 1', 'EN');
INSERT_NEW_VOCABULARY('to talk', 'LEKTION 1', 'EN');
INSERT_NEW_VOCABULARY('hour', 'LEKTION 1', 'EN');
INSERT_NEW_VOCABULARY('monday', 'LEKTION 1', 'EN');
INSERT_NEW_VOCABULARY('music', 'LEKTION 1', 'EN');

INSERT_NEW_VOCABULARY('setzen, stellen, legen', 'LEKTION 1', 'DE');
INSERT_NEW_VOCABULARY('gehen', 'LEKTION 1', 'DE');
INSERT_NEW_VOCABULARY('Mutter', 'LEKTION 1', 'DE');
INSERT_NEW_VOCABULARY('Vater', 'LEKTION 1', 'DE');
INSERT_NEW_VOCABULARY('huebsch', 'LEKTION 1', 'DE');
INSERT_NEW_VOCABULARY('alt', 'LEKTION 1', 'DE');
INSERT_NEW_VOCABULARY('sprechen', 'LEKTION 1', 'DE');
INSERT_NEW_VOCABULARY('Stunde', 'LEKTION 1', 'DE');
INSERT_NEW_VOCABULARY('Montag', 'LEKTION 1', 'DE');
INSERT_NEW_VOCABULARY('Musik', 'LEKTION 1', 'DE');

INSERT_NEW_TRANSLATION('setzen', 'to put', 'LEKTION 1', 'DE');
INSERT_NEW_TRANSLATION('stellen', 'to put', 'LEKTION 1', 'DE');
INSERT_NEW_TRANSLATION('legen', 'to put', 'LEKTION 1', 'DE');
INSERT_NEW_TRANSLATION('gehen', 'to walk', 'LEKTION 1', 'DE');
INSERT_NEW_TRANSLATION('Mutter', 'mother', 'LEKTION 1', 'DE');
INSERT_NEW_TRANSLATION('Vater', 'father', 'LEKTION 1', 'DE');
INSERT_NEW_TRANSLATION('huebsch', 'pretty', 'LEKTION 1', 'DE');
INSERT_NEW_TRANSLATION('alt', 'old', 'LEKTION 1', 'DE');
INSERT_NEW_TRANSLATION('sprechen', 'to talk', 'LEKTION 1', 'DE');
INSERT_NEW_TRANSLATION('Stunde', 'hour', 'LEKTION 1', 'DE');
INSERT_NEW_TRANSLATION('Montag', 'monday', 'LEKTION 1', 'DE');
INSERT_NEW_TRANSLATION('Musik', 'music', 'LEKTION 1', 'DE');

INSERT_NEW_TRANSLATION('to put', 'setzen, stellen, legen', 'LEKTION 1', 'EN');
INSERT_NEW_TRANSLATION('to walk', 'gehen', 'LEKTION 1', 'EN');
INSERT_NEW_TRANSLATION('mother', 'Mutter', 'LEKTION 1', 'EN');
INSERT_NEW_TRANSLATION('father', 'Vater', 'LEKTION 1', 'EN');
INSERT_NEW_TRANSLATION('pretty', 'huebsch', 'LEKTION 1', 'EN');
INSERT_NEW_TRANSLATION('old', 'alt', 'LEKTION 1', 'EN');
INSERT_NEW_TRANSLATION('to talk', 'sprechen', 'LEKTION 1', 'EN');
INSERT_NEW_TRANSLATION('hour', 'Stunde', 'LEKTION 1', 'EN');
INSERT_NEW_TRANSLATION('monday', 'Montag', 'LEKTION 1', 'EN');
INSERT_NEW_TRANSLATION('music', 'Musik', 'LEKTION 1', 'EN');

END;
